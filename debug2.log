DEBUG dir="./app/dist/"
scan_directory dir="./app/dist/", function=None, opts=Opts { dump_cfg: false, dump_callgraph: false }
  0ms DEBUG manifest_file="./app/dist/manifest.yml"
  load_module path="./app/dist/src/index.js"
    visit_import_decl 
      0ms DEBUG local=(Atom('Resolver' type=dynamic), #1)
    
    visit_import_decl 
      0ms DEBUG found @forge/api
      0ms DEBUG adding named specifier, local=Ident { span: Span { lo: BytePos(183), hi: BytePos(192), ctxt: #1 }, sym: Atom('authorize' type=dynamic), optional: false }, orig=None, self.in_forge_import=true
    
    collect_functions 
      add_func_meta id=(Atom('getText' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('administerPermission' type=dynamic), #1)
      add_func_meta id=(Atom('isGlobalAdminPermission' type=dynamic), #1)
      
      add_func_meta id=(Atom('isJiraGlobalAdmin' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('authorize' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Resolved(Authorize)
        0ms DEBUG analyzing method call, propname=Atom('onJira' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('every' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('permissions' type=dynamic), #4)
      add_func_meta id=(Atom('assertIs' type=dynamic), #5)
      
      add_func_meta id=(Atom('assertNever' type=dynamic), #5)
      
      0ms DEBUG binding ident, id=(Atom('obj' type=inline), #10)
      0ms DEBUG binding ident, id=(Atom('validKeys' type=dynamic), #12)
      0ms DEBUG binding ident, id=(Atom('filtered' type=dynamic), #12)
      0ms DEBUG binding ident, id=(Atom('keys' type=inline), #18)
      add_func_meta id=(Atom('joinValues' type=dynamic), #5)
        0ms DEBUG analyzing method call, propname=Atom('map' type=static)
        0ms DEBUG analyzing method call, propname=Atom('join' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('ZodParsedType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('getParsedType' type=dynamic), #1)
      add_func_meta id=(Atom('getParsedType' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('isNaN' type=inline), #9)
        0ms DEBUG checking if import exists, module=None, id=(Atom('isNaN' type=inline), #9)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('isNaN' type=inline), #9) })
        0ms DEBUG analyzing method call, propname=Atom('isArray' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('t' type=inline), #27)
      0ms DEBUG binding ident, id=(Atom('ZodIssueCode' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('quotelessJson' type=dynamic), #1)
      add_func_meta id=(Atom('quotelessJson' type=dynamic), #1)
        0ms DEBUG analyzing method call, propname=Atom('stringify' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('replace' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('json' type=inline), #28)
      0ms DEBUG binding ident, id=(Atom('ZodError' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('error' type=inline), #41)
      0ms DEBUG binding ident, id=(Atom('errorMap' type=dynamic), #1)
      add_func_meta id=(Atom('errorMap' type=dynamic), #1)
        0ms DEBUG analyzing method call, propname=Atom('stringify' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('joinValues' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('joinValues' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('joinValues' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('assertNever' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('assertNever' type=dynamic)
      
      0ms DEBUG binding ident, id=(Atom('overrideErrorMap' type=dynamic), #1)
      add_func_meta id=(Atom('setErrorMap' type=dynamic), #1)
      
      add_func_meta id=(Atom('getErrorMap' type=dynamic), #1)
      
      0ms DEBUG binding ident, id=(Atom('makeIssue' type=dynamic), #1)
      add_func_meta id=(Atom('makeIssue' type=dynamic), #1)
        0ms DEBUG analyzing method call, propname=Atom('filter' type=static)
        0ms DEBUG analyzing method call, propname=Atom('slice' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('reverse' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('map' type=static), #46)
        0ms DEBUG checking if import exists, module=None, id=(Atom('map' type=static), #46)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('map' type=static), #46) })
      
      0ms DEBUG binding ident, id=(Atom('fullPath' type=dynamic), #44)
      0ms DEBUG binding ident, id=(Atom('fullIssue' type=dynamic), #44)
      0ms DEBUG binding ident, id=(Atom('errorMessage' type=dynamic), #44)
      0ms DEBUG binding ident, id=(Atom('maps' type=inline), #44)
      0ms DEBUG binding ident, id=(Atom('EMPTY_PATH' type=dynamic), #1)
      add_func_meta id=(Atom('addIssueToContext' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('getErrorMap' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('getErrorMap' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('getErrorMap' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('filter' type=static)
        0ms DEBUG analyzing function call, id=(Atom('makeIssue' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('makeIssue' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('makeIssue' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('push' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('issue' type=inline), #47)
      0ms DEBUG checking call to, var=(Atom('makeIssue' type=dynamic), #1)
      0ms DEBUG checking if import exists, module=None, id=(Atom('makeIssue' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ParseStatus' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('INVALID' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('DIRTY' type=inline), #1)
      add_func_meta id=(Atom('DIRTY' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('OK' type=inline), #1)
      add_func_meta id=(Atom('OK' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('isAborted' type=dynamic), #1)
      add_func_meta id=(Atom('isAborted' type=dynamic), #1)
      
      0ms DEBUG binding ident, id=(Atom('isDirty' type=inline), #1)
      add_func_meta id=(Atom('isDirty' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('isValid' type=inline), #1)
      add_func_meta id=(Atom('isValid' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('isAsync' type=inline), #1)
      add_func_meta id=(Atom('isAsync' type=inline), #1)
      
      0ms DEBUG binding ident, id=(Atom('ParseInputLazyPath' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('handleResult' type=dynamic), #1)
      add_func_meta id=(Atom('handleResult' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('isValid' type=inline), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('isValid' type=inline), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('isValid' type=inline), #1) })
      
      0ms DEBUG binding ident, id=(Atom('error' type=inline), #67)
      add_func_meta id=(Atom('processCreateParams' type=dynamic), #1)
      
      0ms DEBUG binding ident, id=(Atom('customMap' type=dynamic), #68)
      add_func_meta id=(Atom('customMap' type=dynamic), #68)
      
      0ms DEBUG binding ident, id=(Atom('ZodType' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('cuidRegex' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('uuidRegex' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('emailRegex' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodString' type=dynamic), #1)
      add_func_meta id=(Atom('floatSafeRemainder' type=dynamic), #1)
        0ms DEBUG analyzing method call, propname=Atom('toString' type=static)
        0ms DEBUG analyzing method call, propname=Atom('split' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('toString' type=static)
        0ms DEBUG analyzing method call, propname=Atom('split' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('toFixed' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('replace' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('parseInt' type=dynamic), #9)
        0ms DEBUG checking if import exists, module=None, id=(Atom('parseInt' type=dynamic), #9)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('parseInt' type=dynamic), #9) })
        0ms DEBUG analyzing method call, propname=Atom('toFixed' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('replace' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('parseInt' type=dynamic), #9)
        0ms DEBUG checking if import exists, module=None, id=(Atom('parseInt' type=dynamic), #9)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('parseInt' type=dynamic), #9) })
        0ms DEBUG analyzing method call, propname=Atom('pow' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('valDecCount' type=dynamic), #120)
      0ms DEBUG binding ident, id=(Atom('stepDecCount' type=dynamic), #120)
      0ms DEBUG binding ident, id=(Atom('decCount' type=dynamic), #120)
      0ms DEBUG binding ident, id=(Atom('valInt' type=inline), #120)
      0ms DEBUG checking call to, var=(Atom('parseInt' type=dynamic), #9)
      0ms DEBUG checking if import exists, module=None, id=(Atom('parseInt' type=dynamic), #9)
      0ms DEBUG binding ident, id=(Atom('stepInt' type=inline), #120)
      0ms DEBUG checking call to, var=(Atom('parseInt' type=dynamic), #9)
      0ms DEBUG checking if import exists, module=None, id=(Atom('parseInt' type=dynamic), #9)
      0ms DEBUG binding ident, id=(Atom('ZodNumber' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodBigInt' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodBoolean' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodDate' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodUndefined' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodNull' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodAny' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodUnknown' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodNever' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodVoid' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodArray' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('AugmentFactory' type=dynamic), #1)
      add_func_meta id=(Atom('AugmentFactory' type=dynamic), #1)
      
      add_func_meta id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('deepPartialify' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('deepPartialify' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('unwrap' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('deepPartialify' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('unwrap' type=inline)
        0ms DEBUG analyzing function call, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('deepPartialify' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('deepPartialify' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('map' type=static)
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('newShape' type=dynamic), #191)
      0ms DEBUG binding ident, id=(Atom('fieldSchema' type=dynamic), #193)
      0ms DEBUG binding ident, id=(Atom('ZodObject' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodUnion' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodDiscriminatedUnion' type=dynamic), #1)
      add_func_meta id=(Atom('mergeValues' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('getParsedType' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('getParsedType' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('getParsedType' type=dynamic), #1) })
        0ms DEBUG analyzing function call, id=(Atom('getParsedType' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('getParsedType' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('getParsedType' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('objectKeys' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('objectKeys' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('filter' type=static)
        0ms DEBUG analyzing function call, id=(Atom('mergeValues' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('mergeValues' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('mergeValues' type=dynamic), #1) })
        0ms DEBUG analyzing function call, id=(Atom('mergeValues' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('mergeValues' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('mergeValues' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('push' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('aType' type=inline), #244)
      0ms DEBUG checking call to, var=(Atom('getParsedType' type=dynamic), #1)
      0ms DEBUG checking if import exists, module=None, id=(Atom('getParsedType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('bType' type=inline), #244)
      0ms DEBUG checking call to, var=(Atom('getParsedType' type=dynamic), #1)
      0ms DEBUG checking if import exists, module=None, id=(Atom('getParsedType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('bKeys' type=inline), #245)
      0ms DEBUG binding ident, id=(Atom('sharedKeys' type=dynamic), #245)
      0ms DEBUG binding ident, id=(Atom('newObj' type=inline), #245)
      0ms DEBUG binding ident, id=(Atom('sharedValue' type=dynamic), #248)
      0ms DEBUG checking call to, var=(Atom('mergeValues' type=dynamic), #1)
      0ms DEBUG checking if import exists, module=None, id=(Atom('mergeValues' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('newArray' type=dynamic), #249)
      0ms DEBUG binding ident, id=(Atom('index' type=inline), #250)
      0ms DEBUG binding ident, id=(Atom('itemA' type=inline), #251)
      0ms DEBUG binding ident, id=(Atom('itemB' type=inline), #251)
      0ms DEBUG binding ident, id=(Atom('sharedValue' type=dynamic), #251)
      0ms DEBUG checking call to, var=(Atom('mergeValues' type=dynamic), #1)
      0ms DEBUG checking if import exists, module=None, id=(Atom('mergeValues' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodIntersection' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodTuple' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodRecord' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodMap' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodSet' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodFunction' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodLazy' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodLiteral' type=dynamic), #1)
      add_func_meta id=(Atom('createZodEnum' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('processCreateParams' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('processCreateParams' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('processCreateParams' type=dynamic), #1) })
      
      0ms DEBUG binding ident, id=(Atom('ZodEnum' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('ZodNativeEnum' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodPromise' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodEffects' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodOptional' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodNullable' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodDefault' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ZodNaN' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('BRAND' type=inline), #1)
      0ms DEBUG checking call to, var=(Atom('Symbol' type=static), #9)
      0ms DEBUG checking if import exists, module=None, id=(Atom('Symbol' type=static), #9)
      0ms DEBUG binding ident, id=(Atom('ZodBranded' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('custom' type=inline), #1)
      add_func_meta id=(Atom('custom' type=inline), #1)
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
        0ms DEBUG analyzing method call, propname=Atom('superRefine' type=dynamic)
        0ms DEBUG analyzing method call, propname=Atom('create' type=inline)
      
      0ms DEBUG binding ident, id=(Atom('p' type=static), #345)
      0ms DEBUG binding ident, id=(Atom('p2' type=inline), #345)
      0ms DEBUG binding ident, id=(Atom('late' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('instanceOfType' type=dynamic), #1)
      add_func_meta id=(Atom('instanceOfType' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('custom' type=inline), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('custom' type=inline), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('custom' type=inline), #1) })
      
      0ms DEBUG binding ident, id=(Atom('stringType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('numberType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('nanType' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('bigIntType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('booleanType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('dateType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('undefinedType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('nullType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('anyType' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('unknownType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('neverType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('voidType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('arrayType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('objectType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('strictObjectType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('unionType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('discriminatedUnionType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('intersectionType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('tupleType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('recordType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('mapType' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('setType' type=inline), #1)
      0ms DEBUG binding ident, id=(Atom('functionType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('lazyType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('literalType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('enumType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('nativeEnumType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('promiseType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('effectsType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('optionalType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('nullableType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('preprocessType' type=dynamic), #1)
      0ms DEBUG binding ident, id=(Atom('ostring' type=inline), #1)
      add_func_meta id=(Atom('ostring' type=inline), #1)
        0ms DEBUG analyzing function call, id=(Atom('stringType' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('stringType' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('stringType' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('optional' type=dynamic)
      
      1ms DEBUG binding ident, id=(Atom('onumber' type=inline), #1)
      add_func_meta id=(Atom('onumber' type=inline), #1)
        0ms DEBUG analyzing function call, id=(Atom('numberType' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('numberType' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('numberType' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('optional' type=dynamic)
      
      1ms DEBUG binding ident, id=(Atom('oboolean' type=dynamic), #1)
      add_func_meta id=(Atom('oboolean' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('booleanType' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('booleanType' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('booleanType' type=dynamic), #1) })
        0ms DEBUG analyzing method call, propname=Atom('optional' type=dynamic)
      
      1ms DEBUG binding ident, id=(Atom('NEVER' type=inline), #1)
      1ms DEBUG binding ident, id=(Atom('mod' type=inline), #1)
      1ms DEBUG binding ident, id=(Atom('getTextSchema' type=dynamic), #1)
      1ms DEBUG binding ident, id=(Atom('resolver' type=dynamic), #1)
      1ms DEBUG binding ident, id=(Atom('accountId' type=dynamic), #349)
      1ms DEBUG checking call to, var=(Atom('requireAccountId' type=dynamic), #1)
      1ms DEBUG checking if import exists, module=None, id=(Atom('requireAccountId' type=dynamic), #1)
      1ms DEBUG binding ident, id=(Atom('payload' type=inline), #349)
      add_func_meta id=(Atom('requireAccess' type=dynamic), #1)
        0ms DEBUG analyzing function call, id=(Atom('isJiraGlobalAdmin' type=dynamic), #1)
        0ms DEBUG checking if import exists, module=None, id=(Atom('isJiraGlobalAdmin' type=dynamic), #1)
        0ms DEBUG adding new ir stmt, stmt=Call(ModItem { mod_id: ModId(4294967295), ident: (Atom('isJiraGlobalAdmin' type=dynamic), #1) })
      
      1ms DEBUG binding ident, id=(Atom('isAdmin' type=inline), #350)
      add_func_meta id=(Atom('requireAccountId' type=dynamic), #1)
        0ms DEBUG analyzing method call, propname=Atom('string' type=static)
        0ms DEBUG analyzing method call, propname=Atom('parse' type=inline)
      
      1ms DEBUG binding ident, id=(Atom('handler' type=inline), #1)
    
  
  4ms DEBUG keys=[ModId(0)]
  resolve_export mod_id=ModId(0), func=(Atom('map' type=static), #46)
  
  resolve_export mod_id=ModId(0), func=(Atom('numberType' type=dynamic), #1)
  
  resolve_export mod_id=ModId(0), func=(Atom('booleanType' type=dynamic), #1)
  
  resolve_export mod_id=ModId(0), func=(Atom('parseInt' type=dynamic), #9)
  
  resolve_export mod_id=ModId(0), func=(Atom('parseInt' type=dynamic), #9)
  
  resolve_export mod_id=ModId(0), func=(Atom('stringType' type=dynamic), #1)
  
  resolve_export mod_id=ModId(0), func=(Atom('isNaN' type=inline), #9)
  
  verify_funs 
  

